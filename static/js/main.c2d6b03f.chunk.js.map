{"version":3,"sources":["components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/TodoStatus.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoInfo","isSelected","todo","onSelectTodo","id","title","completed","className","classNames","type","onClick","TodoList","React","memo","todos","selectedTodoId","selectTodo","map","TodoFilter","onQueryChange","onSelectChange","onApplyQuery","query","select","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoStatus","TodoModal","currentTodo","onClose","onCloseModal","userId","useState","user","setUser","useEffect","getUser","currentUser","name","href","email","App","setTodos","todoId","setTodoId","setQuery","appliedQuery","setAppliedQuery","ALL","selectedTodo","setSelectedTodo","applyQuery","useCallback","f","timerId","clearTimeout","args","debounce","todoList","useMemo","find","changedQuery","changedSelect","visibleTodos","filter","includesQuery","toLowerCase","includes","ACTIVE","COMPLETED","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2d6b03f.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  isSelected: boolean;\n  todo: Todo;\n  onSelectTodo: (id: number) => void;\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  isSelected,\n  todo,\n  onSelectTodo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <tr data-cy=\"todo\" className=\"\">\n      <td className=\"is-vcentered\">{id}</td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectTodo(id)}\n        >\n          <span className=\"icon\">\n            <i className={classNames('far', {\n              'fa-eye-slash': isSelected,\n              'fa-eye': !isSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number;\n  selectTodo: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  selectedTodoId,\n  selectTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const isSelected = (selectedTodoId)\n            ? todo.id === selectedTodoId\n            : false;\n\n          return (\n            <TodoInfo\n              isSelected={isSelected}\n              key={todo.id}\n              todo={todo}\n              onSelectTodo={selectTodo}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","type Props = {\n  onQueryChange: (changedQuery: string) => void;\n  onSelectChange: (changedSelect: string) => void;\n  onApplyQuery: (newQuery: string) => void;\n  query: string;\n  select: string;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onQueryChange,\n  onSelectChange,\n  onApplyQuery,\n  query,\n  select,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={select}\n          onChange={event => onSelectChange(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={event => {\n          onApplyQuery(event.target.value);\n          onQueryChange(event.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            aria-label=\"clear input\"\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              onApplyQuery('');\n              onQueryChange('');\n            }}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum TodoStatus {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  currentTodo: Todo;\n  onCloseModal: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  currentTodo,\n  onCloseModal: onClose,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = currentTodo;\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId).then(currentUser => setUser(currentUser));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user?.name ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              aria-label=\"clear input\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`\"mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\n\ntype Callback = (newQuery: string) => void;\n\nfunction debounce(f: Callback, delay: number) {\n  let timerId: number;\n\n  return (...args: []) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoId, setTodoId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<TodoStatus>(TodoStatus.ALL);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 500),\n    [],\n  );\n\n  useEffect(() => {\n    getTodos().then(todoList => setTodos(todoList));\n  }, []);\n\n  const currentTodo = useMemo(() => {\n    return todos.find(todo => (todo.id === todoId));\n  }, [todoId, query]);\n\n  const closeModal = () => {\n    setTodoId(0);\n  };\n\n  const onQueryChange = useCallback((changedQuery: string) => {\n    setQuery(changedQuery);\n  }, []);\n\n  const onSelectChange = useCallback((changedSelect) => {\n    setSelectedTodo(changedSelect);\n  }, []);\n\n  const getVisibleTodos = () => {\n    const selectedBy = todos.filter(todo => {\n      const includesQuery = todo.title.toLowerCase()\n        .includes(query.toLowerCase());\n\n      switch (selectedTodo) {\n        case TodoStatus.ACTIVE:\n          return !todo.completed && includesQuery;\n        case TodoStatus.COMPLETED:\n          return todo.completed && includesQuery;\n        default:\n          return includesQuery;\n      }\n    });\n\n    return selectedBy;\n  };\n\n  const visibleTodos = useMemo(\n    getVisibleTodos,\n    [todos, appliedQuery, selectedTodo],\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onQueryChange={onQueryChange}\n                onSelectChange={onSelectChange}\n                onApplyQuery={applyQuery}\n                query={query}\n                select={selectedTodo}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={todoId}\n                    selectTodo={(id:number) => setTodoId(id)}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          currentTodo={currentTodo}\n          onCloseModal={closeModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}